stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
a = expression("de/dt")
b = expression("d2e/dt2")
c = expression("d2e/dt23")
d = expression("d2e/dt24")
type = c(a, b, c, d)
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1]), parse=TRUE) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
a = expression("de/dt")
b = expression("d2e/dt2")
c = expression("d2e/dt23")
d = expression("d2e/dt24")
type = c(a, b, c, d)
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1],parse=TRUE)) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "de/dt", "a", "b")
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1],parse=TRUE)) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "de/dt", "d^2/dt^2", "b")
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1],parse=TRUE)) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "de/dt", "d^2/dt^2", "b")
ggplot(data.frame(x=c(t0, tf)), aes(x=x), parse=TRUE) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1])) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "d/dt e", "d^2/dt^2 e", "d^3/dt^3 e")
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1])) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "red", "black", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "d/dt e", "d^2/dt^2 e", "d^3/dt^3 e")
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1])) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "black", "red", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "solid", "solid", "dashed"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "d/dt e", "d^2/dt^2 e", "d^3/dt^3 e")
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1])) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "black", "red", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dotted", "dashed", "solid", "solid"))
library("ggplot2")
library(grid)
tf = 5
t0 = 0
td = tf-t0
e0 = 1
ef = 0
f1 = 30*(ef-e0)/td
f2 = f1/td
f3 = 2*f2/td
pos = function(x){e0 + (e0-ef)*(15*(x/td)^4 - 6*(x/td)^5 - 10*(x/td)^3)}
vel = function(x){f1 * ((x/td)^2 - 2*(x/td)^3 + (x/td)^4)}
acc = function(x){f2 * (2*(x/td) - 6*(x/td)^2 + 4*(x/td)^3)}
jrk = function(x){f3 * (1 - 6*(x/td) + 6*(x/td)^2)}
type = c("e", "d/dt e", "d^2/dt^2 e", "d^3/dt^3 e")
ggplot(data.frame(x=c(t0, tf)), aes(x=x)) +
xlab("t [s]") + ylab("") + labs(title = "Minimal Jerk Task Evolution") +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text=element_text(size=24),
legend.key.size=unit(2,"cm"),
plot.title=element_text(size=32)) +
stat_function(fun=function(x){0}, geom="line", size=0.5) +
stat_function(fun=pos, geom="line", size=1.3, aes(colour=type[1], linetype=type[1])) +
stat_function(fun=vel, geom="line", size=1.3, aes(colour=type[2], linetype=type[2])) +
stat_function(fun=acc, geom="line", size=1.3, aes(colour=type[3], linetype=type[3])) +
stat_function(fun=jrk, geom="line", size=1.3, aes(colour=type[4], linetype=type[4])) +
scale_colour_manual("",
breaks = type,
values = c("black", "black", "red", "black")) +
scale_linetype_manual("",
breaks = type,
values = c("dashed", "dotted", "solid", "solid"))
setwd("~/Documents/exjobb_aass/hiqp/hiqp_controllers/minjerk_eval")
rawdata <- read.csv("test_data.csv", header=FALSE)
View(rawdata)
rawdata <- read.csv("test_data.csv", header=FALSE)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
t_tf <- series_t[,2]
f_tf <- series_f[,2]
t_f <- series_t[,1]
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
t_f <- series_t[,1]
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
ggplot(data.frame(x=t_f, y=t_efe0), aes()) + geom_line()
library(ggplot2)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
ggplot(data.frame(x=t_f, y=t_efe0), aes()) + geom_line()
library(ggplot2)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line()
library(ggplot2)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
#ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line()
#ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line()
#ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line()
+ xlab("feq [Hz]") + ylab("final error [%]") + title("ef/e0 as function of f
ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line()
+ xlab("feq [Hz]") + ylab("final error [%]") + title("ef/e0 as function of f")
ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("feq [Hz]") + ylab("final error [%]") + title("ef/e0 as function of f")
ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("feq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("feq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
library(ggplot2)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
library(ggplot2)
library(grid)
library(gridExtra)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
p1 <- ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
p2 <- ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
p3 <- ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("final error [%]") + labs(title = "efe0 as function of t_f")
p4 <- ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("deviance from C") + labs(title = "SC as function of t_f")
grid.arrange(p1, p2, p3, p4, ncol = 2, main = "Main title")
library(ggplot2)
library(grid)
library(gridExtra)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
p1 <- ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
p2 <- ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
p3 <- ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("final error [%]") + labs(title = "efe0 as function of t_f")
p4 <- ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("deviance from C") + labs(title = "SC as function of t_f")
grid.arrange(p1, p2, ncol = 2, main = "Main title")
library(ggplot2)
library(grid)
library(gridExtra)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
p1 <- ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
p2 <- ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
p3 <- ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("final error [%]") + labs(title = "efe0 as function of t_f")
p4 <- ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("deviance from C") + labs(title = "SC as function of t_f")
#grid.arrange(p1, p2, ncol = 2, main = "Main title")
library(ggplot2)
library(grid)
library(gridExtra)
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
p1 <- ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
p2 <- ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
p3 <- ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("final error [%]") + labs(title = "efe0 as function of t_f")
p4 <- ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("deviance from C") + labs(title = "SC as function of t_f")
multiplot(p1, p2, p3, p4, cols=2)
#grid.arrange(p1, p2, ncol = 2, main = "Main title")
source(multiplot)
source(multiplot)
source(multiplot.R)
source("multiplot.R")
library(ggplot2)
source("multiplot.R")
rawdata <- read.csv("test_data.csv", header=FALSE)
series_t <- rawdata[rawdata$V2==5,]
series_f <- rawdata[rawdata$V1==20,]
f_tf <- series_f[,2]
f_efe0 <- series_f[,6]
f_SC <- series_f[,7]
t_f <- series_t[,1]
t_efe0 <- series_t[,6]
t_SC <- series_t[,7]
p1 <- ggplot(data.frame(x=t_f, y=t_efe0), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("final error [%]") + labs(title = "efe0 as function of f")
p2 <- ggplot(data.frame(x=t_f, y=t_SC), aes(x=x, y=y)) + geom_line() +
xlab("freq [Hz]") + ylab("deviance from C") + labs(title = "SC as function of f")
p3 <- ggplot(data.frame(x=f_tf, y=f_efe0), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("final error [%]") + labs(title = "efe0 as function of t_f")
p4 <- ggplot(data.frame(x=f_tf, y=f_SC), aes(x=x, y=y)) + geom_line() +
xlab("duration [s]") + ylab("deviance from C") + labs(title = "SC as function of t_f")
multiplot(p1, p2, p3, p4, cols=2)
#grid.arrange(p1, p2, ncol = 2, main = "Main title")
